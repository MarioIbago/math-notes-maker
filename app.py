# app.py ‚Äî Imagen/Text/PDF/PPTX ‚ûú Sheet Cheat en PDF (LaTeX)
# ===========================================================

import streamlit as st
from openai import OpenAI
from PIL import Image
from io import BytesIO
import base64
import subprocess
import os
import re
import tempfile
import PyPDF2
from pptx import Presentation

st.set_page_config(page_title="Sheet Cheat en PDF", page_icon="üìò", layout="centered")

# ------------------ CONFIG ------------------
# Clave de OpenAI: usa secrets o variable de entorno
API_KEY = st.secrets.get("OPENAI_API_KEY") or os.getenv("OPENAI_API_KEY", "")
if not API_KEY:
    st.warning("‚ö†Ô∏è Configura tu OPENAI_API_KEY en Secrets (Streamlit) o como variable de entorno.")
client = OpenAI(api_key=API_KEY)

st.title("üìò Imagen / Texto / PDF / PPTX ‚ûú Sheet Cheat en PDF (by Mario Ibarra)")

# ------------------ PROMPT ------------------
PROMPT_CHEATSHEET = (
    "Act√∫as como un asistente experto en hojas de trucos (cheat sheets). "
    "Devuelve EXCLUSIVAMENTE un DOCUMENTO LaTeX completo y compilable. "
    "FORMATO OBLIGATORIO DE SALIDA: la PRIMERA l√≠nea debe ser exactamente 'COOR-BO-ZY'; "
    "a partir de la SEGUNDA l√≠nea comienza el documento LaTeX, SIN bloques de ``` ni texto fuera del LaTeX.\n\n"
    "PRE√ÅMBULO (descrito, no pegues este texto): clase 'article' 11pt; espa√±ol con babel; UTF-8 y T1; Latin Modern; "
    "amsmath, amssymb, mathtools; geometry A4 con ~2‚Äì2.5 cm; enumitem; xcolor; tcolorbox sobrio; microtype; hyperref; graphicx. "
    "NO uses 'titlesec' ni \\titleformat/\\titlespacing; evita TikZ y paquetes no listados; nada de \\makeatletter, \\input, \\write18.\n\n"
    "ESTRUCTURA EXACTA (con foco en F√ìRMULAS y EXPLICACIONES):\n"
    "1) Portada simple: \\title{Sheet Cheat: <tema>}, \\author{}, \\date{}, \\maketitle.\n"
    "2) \\section{Introducci√≥n}: 3‚Äì5 l√≠neas: qu√© es, para qu√© sirve, contexto breve.\n"
    "3) \\section{Definici√≥n}: un tcolorbox con la definici√≥n formal y una ecuaci√≥n en display si aplica.\n"
    "4) \\section{Propiedades}: 5‚Äì8 vi√±etas (itemize), cada una 1‚Äì2 l√≠neas; usa notaci√≥n matem√°tica donde sea √∫til.\n"
    "5) \\section{F√≥rmulas clave}: incluye TODAS las f√≥rmulas detectadas + las impl√≠citas importantes que falten. "
    "Usa equation* o align*; agrupa por subbloques comentados si ayuda a la legibilidad.\n"
    "6) \\section{Derivaciones m√≠nimas}: 2‚Äì4 derivaciones cortas y limpias (‚â§6 l√≠neas) para f√≥rmulas usadas.\n"
    "7) \\section{Ejemplos r√°pidos}: 1‚Äì2 ejemplos num√©ricos (2‚Äì5 l√≠neas cada uno).\n"
    "8) \\section{Aplicaciones}: enumerate de 3‚Äì6 √≠tems; cada √≠tem con \\textbf{Etiqueta:} + explicaci√≥n breve.\n"
    "9) \\section{S√≠mbolos y notaci√≥n} (opcional): lista compacta de variables.\n"
    "10) \\section{Resumen de f√≥rmulas esenciales}: tcolorbox final con 4‚Äì8 f√≥rmulas en display; bajo cada una, nota breve.\n\n"
    "ESTILO Y CALIDAD:\n"
    "‚Ä¢ Espa√±ol claro y conciso; objetivo 1‚Äì2 p√°ginas. "
    "‚Ä¢ Al final, pie de p√°gina en LaTeX: Desarrollado por [MarioIbago](https://github.com/MarioIbago). "
    "‚Ä¢ Matem√°ticas limpias: \\frac, potencias, sub/superscripts; sin adornos innecesarios. "
    "‚Ä¢ NUNCA uses Markdown (**negritas**, _cursivas_, `c√≥digo`): usa \\textbf{...} y \\emph{...}. "
    "‚Ä¢ No im√°genes; sin comentarios; balancea entornos; compila con pdflatex.\n\n"
    "ENTRADA: recibe texto o extracto de imagen; destila f√≥rmulas relevantes, expl√≠calas brevemente y cierra con el tcolorbox."
)

# ------------------ UTILS -------------------
_TITLESec_PAT = re.compile(r'\\usepackage\\s*\\{?\\s*titlesec\\s*\\}?', re.I)
_TITLEFORMAT_PAT = re.compile(r'\\title(?:format|spacing)\\*?[^\\n]*', re.I)

def _image_to_base64(uploaded_file):
    buf = BytesIO()
    img = Image.open(uploaded_file).convert("RGB")
    img.save(buf, format="JPEG")
    return base64.b64encode(buf.getvalue()).decode("utf-8")

def extract_text_from_pdf(uploaded_file):
    try:
        reader = PyPDF2.PdfReader(uploaded_file)
        parts = []
        for page in reader.pages:
            page_text = page.extract_text() or ""
            if page_text.strip():
                parts.append(page_text)
        return "\n".join(parts).strip()
    except Exception as e:
        st.error(f"Error leyendo PDF: {e}")
        return ""

def extract_text_from_pptx(uploaded_file):
    try:
        prs = Presentation(uploaded_file)
        parts = []
        for slide in prs.slides:
            for shape in slide.shapes:
                if hasattr(shape, "text"):
                    t = (shape.text or "").strip()
                    if t:
                        parts.append(t)
        return "\n".join(parts).strip()
    except Exception as e:
        st.error(f"Error leyendo PPTX: {e}")
        return ""

def sanitize_latex(content: str) -> str:
    # elimina fences, metadatos y paquetes prohibidos
    lines = []
    for line in content.splitlines():
        s = line.strip()
        if s.startswith("```") or s.startswith("% !TEX"):
            continue
        lines.append(line)
    txt = "\n".join(lines)
    txt = txt.replace("\\r\\n", "\n").replace("\\n", "\n").replace("\r\n", "\n")
    txt = txt.replace("\ufeff", "").strip()
    if txt.startswith("COOR-BO-ZY"):
        txt = txt.split("\n", 1)[-1] if "\n" in txt else ""
    txt = _TITLESec_PAT.sub("", txt)
    txt = _TITLEFORMAT_PAT.sub("", txt)
    return txt.strip()

def ensure_full_document(latex_code: str) -> str:
    if "\\begin{document}" in latex_code:
        return latex_code
    wrapper = (
        "\\documentclass[11pt]{article}\n"
        "\\usepackage[spanish, es-tabla]{babel}\n"
        "\\usepackage[utf8]{inputenc}\n"
        "\\usepackage[T1]{fontenc}\n"
        "\\usepackage{lmodern}\n"
        "\\usepackage{amsmath,amssymb,amsthm,mathtools}\n"
        "\\usepackage[a4paper,margin=2.0cm]{geometry}\n"
        "\\usepackage{enumitem}\n"
        "\\usepackage{xcolor}\n"
        "\\usepackage{tcolorbox}\n"
        "\\usepackage{graphicx}\n"
        "\\usepackage{hyperref}\n"
        "\\usepackage{microtype}\n"
        "\\tcbset{colback=gray!3,colframe=black!50,boxrule=0.5pt,arc=2pt}\n\n"
        "\\begin{document}\n" + latex_code + "\n\\end{document}\n"
    )
    return wrapper

def call_openai(prompt, notes_text=None, image_b64=None):
    if not API_KEY:
        st.error("No hay API key configurada.")
        return ""
    try:
        if image_b64:
            resp = client.chat.completions.create(
                model="gpt-4o-mini",
                max_tokens=3000,
                messages=[{
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt + "\n\nTexto de entrada: (extra√≠do de imagen)"},
                        {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{image_b64}"}}
                    ]
                }]
            )
        else:
            resp = client.chat.completions.create(
                model="gpt-4o-mini",
                max_tokens=3000,
                messages=[{"role": "user", "content": prompt + f"\n\nTexto de entrada:\n{notes_text or ''}"}]
            )
        content = (resp.choices[0].message.content or "").strip()
    except Exception as e:
        st.error(f"Error al llamar a OpenAI: {e}")
        return ""

    content = sanitize_latex(content)
    content = ensure_full_document(content)
    return content

def compile_pdf(latex_code: str):
    if not latex_code.strip():
        st.error("No hay c√≥digo LaTeX para compilar.")
        return None

    with tempfile.TemporaryDirectory() as tmpdir:
        tex_path = os.path.join(tmpdir, "sheat_cheat.tex")
        with open(tex_path, "w", encoding="utf-8") as f:
            f.write(latex_code)

        # doble pasada por referencias/√≠ndices
        for _ in range(2):
            result = subprocess.run(
                ["pdflatex", "-interaction=nonstopmode", "-halt-on-error", "-file-line-error", "sheat_cheat.tex"],
                cwd=tmpdir,
                stdout=subprocess.PIPE, stderr=subprocess.PIPE
            )
            if result.returncode != 0:
                log_path = os.path.join(tmpdir, "sheat_cheat.log")
                stdout = result.stdout.decode(errors="ignore")
                stderr = result.stderr.decode(errors="ignore")
                logtxt = ""
                if os.path.exists(log_path):
                    with open(log_path, "r", encoding="utf-8", errors="ignore") as logf:
                        logtxt = logf.read()
                st.text_area("‚ùå Error en LaTeX (log)", logtxt or stdout or stderr, height=360)
                return None

        pdf_path = os.path.join(tmpdir, "sheat_cheat.pdf")
        if os.path.exists(pdf_path):
            with open(pdf_path, "rb") as fpdf:
                return fpdf.read()
        st.error("‚ùå No se encontr√≥ el PDF tras compilar.")
        return None

# ------------------ INTERFAZ ------------------
mode = st.radio("Entrada:", ["Subir imagen", "Escribir texto", "Subir PDF", "Subir PPTX"], horizontal=True)
notes_text = ""
image_b64 = None

if mode == "Subir imagen":
    up = st.file_uploader("üì§ Sube una imagen (JPG/PNG)", type=["jpg","jpeg","png"])
    if up is not None:
        st.image(up, caption="Imagen cargada", width=300)
        image_b64 = _image_to_base64(up)

elif mode == "Escribir texto":
    notes_text = st.text_area("‚úçÔ∏è Escribe o pega tus notas", height=220, placeholder="Tema o contenido...")

elif mode == "Subir PDF":
    up = st.file_uploader("üì§ Sube un PDF", type=["pdf"])
    if up is not None:
        notes_text = extract_text_from_pdf(up)
        st.text_area("üìÑ Texto extra√≠do del PDF", notes_text, height=220)

elif mode == "Subir PPTX":
    up = st.file_uploader("üì§ Sube un PPTX", type=["pptx"])
    if up is not None:
        notes_text = extract_text_from_pptx(up)
        st.text_area("üìä Texto extra√≠do del PPTX", notes_text, height=220)

if st.button("‚ö° Generar Sheet Cheat"):
    st.info("‚è≥ Generando LaTeX con GPT...")
    latex_code = call_openai(PROMPT_CHEATSHEET, notes_text=notes_text, image_b64=image_b64)

    if not latex_code:
        st.error("No se obtuvo contenido de LaTeX.")
        st.stop()

    st.subheader("üìÑ C√≥digo LaTeX completo")
    st.code(latex_code, language="latex")

    st.download_button(
        "üì• Descargar .tex",
        data=latex_code.encode("utf-8"),
        file_name="sheat_cheat.tex",
        mime="text/plain"
    )

    st.info("üõ†Ô∏è Compilando con pdfLaTeX...")
    pdf_bytes = compile_pdf(latex_code)
    if pdf_bytes:
        st.success("‚úÖ PDF generado correctamente.")
        st.download_button(
            "üì• Descargar PDF",
            data=pdf_bytes,
            file_name="sheat_cheat.pdf",
            mime="application/pdf"
        )
    else:
        st.error("‚ùå Fall√≥ la compilaci√≥n del PDF. Revisa el LaTeX o el log mostrado.")
